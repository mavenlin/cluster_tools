#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
#
# ARG_POSITIONAL_SINGLE([cluster],[cluster name])
# ARG_POSITIONAL_SINGLE([command],[command to run])
# ARG_HELP([grouping slurm commands])
# ARG_LEFTOVERS([command arguments])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "grouping slurm commands"
	printf 'Usage: %s [-h|--help] <cluster> <command> ... \n' "$0"
	printf '\t%s\n' "<cluster>: cluster name"
	printf '\t%s\n' "<command>: command to run"
	printf '\t%s\n' "... : command arguments"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'cluster' and 'command'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_cluster _arg_command "
	_our_args=$((${#_positionals[@]} - 2))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

CLUSTER=$_arg_cluster
source $(dirname "$0")/slurm_utils.sh
SLURM_PORT=$(find_port "$CLUSTER")

if [ $_arg_command = "submit" ]
then
    $(dirname $0)/slurm_submit $CLUSTER ${_arg_leftovers[@]}
elif [ $_arg_command = "connect" ]
then
    $(dirname $0)/slurm_connect $CLUSTER
    USER=$(find_user "$CLUSTER")
    ssh -p $SLURM_PORT $USER@localhost
elif [ $_arg_command = "grep" ]
then
    $(dirname $0)/slurm_grep $CLUSTER ${_arg_leftovers[@]}
elif [ $_arg_command = "error" ]
then
    $(dirname $0)/slurm_cat $CLUSTER slurm.err
elif [ $_arg_command = "output" ]
then
    $(dirname $0)/slurm_cat $CLUSTER slurm.out
elif [ $_arg_command = "tb" ]
then
    $(dirname $0)/tb $CLUSTER
elif [ $_arg_command = "clear_tb" ]
then
    $(dirname $0)/clear_tb $CLUSTER
else
    echo "$_arg_command is not a valid command"
    exit 1
fi

# ] <-- needed because of Argbash
